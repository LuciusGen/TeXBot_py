from math import ceil

from telebot import types

from mth import Math
import theorems
import themes


class Answers:
    """Class for bot answers"""

    main_markup = types.ReplyKeyboardMarkup()
    main_markup.row('üìö–í—ã—à–º–∞—Ç', '‚òù–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
    main_markup.row('‚ùî–°–ø—Ä–∞–≤–∫–∞', 'üí∞–ü–æ–º–æ—â—å –ø—Ä–æ–µ–∫—Ç—É')

    back = "–ù–∞–∑–∞–¥"

    start_ans = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. –ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –∫–æ–¥–∞ LaTex, " \
                "—Ç–∞–∫–∂–µ –∑–¥–µ—Å—å —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –≤—ã—à–º–∞—Ç–∞"

    reference_ans = "üîò /tex <—Ñ–æ—Ä–º—É–ª–∞> - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç <—Ñ–æ—Ä–º—É–ª–∞> –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –Ω–µ–π.\n" \
                    "üîò –î–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º –ø–æ –≤—ã—Å—à–µ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ" \
                    " –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º.\n" \
                    "üîò *inlineMode* - –≤–≤–µ–¥–∏—Ç–µ –≤ –ª—é–±–æ–º —á–∞—Ç–µ `@latex_edit_bot` –∞ –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Ñ–æ—Ä–º—É–ª—É" \
                    " –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –≤–∞—à–µ–π —Ñ–æ—Ä–º—É–ª–æ–π.\n" \
                    "üîò –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º—É–ª" \
                    " –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å [–∑–¥–µ—Å—å](https://en.wikibooks.org/wiki/LaTeX/Mathematics#Inserting_%22Displayed)" \
                    ".\nüîò –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è " + r"`\begin{}..\end{}` –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."

    url_donate_path = 'https://money.yandex.ru/to/4100111962148422'
    url_team_leader = 'https://t.me/dont_open'
    url_bit_coin = 'https://topcash.me/ru/yamrub_to_btc'
    bit_coin_bill = 'bc1qwz2rcelzqdwh8y4kqupk3q5qrtsayltvnf955c'

    @staticmethod
    def gen_paged_list(section, sections_type, page, page_size):

        if sections_type == 'theorem':
            theorems.theorems_from_database(section)
            topic_len = len(theorems.matan_theorems_buttons)
            back = section + '.' + "back to themes"
        elif sections_type == 'section':
            topic_len = Math.get_topic_size(section)
            back = Answers.back + "back to sections"
        else:
            return

        # numb of pages
        pages_numb = ceil(topic_len / page_size)

        back_button = types.InlineKeyboardButton(
            "üî• " + Answers.back + "(" + str(page + 1) + "/" + str(pages_numb) + ")",
            callback_data=back)

        if pages_numb > 1:
            if page == 0:
                where_left = pages_numb - 1
                where_right = page + 1
            elif page == pages_numb - 1:
                where_left = page - 1
                where_right = 0
            else:
                where_left = page - 1
                where_right = page + 1

            left_button = types.InlineKeyboardButton("‚¨Ö(" + str(where_left + 1) + "/" + str(pages_numb) + ")",
                                                     callback_data=section + sections_type + "." + str(where_left))

            right_button = types.InlineKeyboardButton("‚û°(" + str(where_right + 1) + "/" + str(pages_numb) + ")",
                                                      callback_data=section + sections_type + "." + str(where_right))

            if (page + 1) * page_size <= topic_len:
                if sections_type == 'theorem':
                    markup = theorems.generate_theorems(page * page_size, (page + 1) * page_size)
                elif sections_type == 'section':
                    markup = themes.generate_topic_markup(section, page * page_size, (page + 1) * page_size)
            else:
                if sections_type == 'theorem':
                    markup = theorems.generate_theorems(page * page_size, topic_len)
                elif sections_type == 'section':
                    markup = themes.generate_topic_markup(section, page * page_size, topic_len)

            markup.row(left_button, back_button, right_button)
        else:
            if sections_type == 'theorem':
                markup = theorems.generate_theorems(page, topic_len, section)
            elif sections_type == 'section':
                markup = themes.generate_topic_markup(section, page, topic_len)
            markup.add(back_button)
        return markup

# -*- coding: utf-8 -*-
import telebot
from telebot import types
import re

import mth
from conf import Config
from ans import Answers
from mth import Math

url_donate_path = 'https://money.yandex.ru/to/4100111962148422'
url_team_leader = 'https://t.me/dont_open'
bot_token = Config.get_token()

bot = telebot.TeleBot(bot_token)


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, Answers.start_ans, reply_markup=Answers.main_markup, parse_mode='markdown')


@bot.message_handler(regexp=r"^\/tex .+")
def convert_latex(message):
    regex = r"^\/tex (.+)"
    parser = re.search(regex, message.text)
    tex_command = parser.group(1)

    # –ó–∞–≥–ª—É—à–∫–∞. –£–±—Ä–∞—Ç—å, –∫–æ–≥–¥–∞ —Å–¥–µ–ª–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–∏–Ω–∫–∏
    bot.send_message(message.chat.id,
                     "–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É *\"" + tex_command + "\"*. –í—Å–∫–æ—Ä–µ —è –Ω–∞—É—á—É—Å—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –µ—ë –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É!",
                     parse_mode='markdown')


@bot.message_handler(content_types=['text'])
def send_text(message):
    if message.text == 'üìö–í—ã—à–º–∞—Ç':
        bot.send_message(message.chat.id, Math.math_ans, reply_markup=mth.start_kb_for_high_school())

    if message.text == 'üí∞–ü–æ–º–æ—â—å –ø—Ä–æ–µ–∫—Ç—É':
        bot.send_message(message.chat.id, url_donate_path)

    if message.text == '‚òù–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ–µ–∫—Ç–∞: " + url_team_leader)

    if message.text == '‚ùî–°–ø—Ä–∞–≤–∫–∞':
        bot.send_message(message.chat.id, "/tex <—Ñ–æ—Ä–º—É–ª–∞> - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç <—Ñ–æ—Ä–º—É–ª–∞> –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –Ω–µ–π. "
                                          "–î–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º –ø–æ –≤—ã—Å—à–µ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ "
                                          "–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º")


def is_section(data):
    if "section" in data.split('.'):
        return True
    return False
    

@bot.callback_query_handler(func=lambda call: is_section(call.data))
def query_handler(call):
    kb = types.InlineKeyboardMarkup()
    data = call.data.split('.')
    topic = data[0]
    page = data[-1]

    if topic+"." in [Math.matan, Math.linal, Math.geom]:
        kb = mth.generate_paged_list(topic+".", int(page))

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=kb,
                          text="–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª: " + topic + "\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É.")


@bot.callback_query_handler(func=lambda call: call.data.endswith("back to sections"))
def query_handler(call):
    data = call.data[:-len('back to sections')]
    if data == Answers.back:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=mth.start_kb_for_high_school(),
                              text=Math.math_ans)


bot.polling(none_stop=False, interval=1, timeout=20)

from telebot import types



# template of callback data: "[name-of-topic].[section].[page-number]"
def start_kb_for_high_school():
    # section - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–Ω–æ–ø–∫—É "—Ä–∞–∑–¥–µ–ª"
    start_page = 0
    sect_1_button = types.InlineKeyboardButton("üìà " + Math.matan,
                                               callback_data=Math.matan + "section." + str(start_page))
    sect_2_button = types.InlineKeyboardButton("üìì " + Math.linal,
                                               callback_data=Math.linal + "section." + str(start_page))
    sect_3_button = types.InlineKeyboardButton("üìê " + Math.geom,
                                               callback_data=Math.geom + "section." + str(start_page))

    math_mark = types.InlineKeyboardMarkup(row_width=1)
    math_mark.add(sect_1_button, sect_2_button, sect_3_button)

    return math_mark


class Math:
    # —Ä–∞–∑–¥–µ–ª—ã
    matan = "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑."
    linal = "–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞."
    geom = "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—è –≥–µ–æ–º–µ—Ç—Ä–∏—è."

    # number of sections in every topic
    topic_sizes_dict = {matan: 14, linal: 9, geom: 12}

    # —Ç–µ–º—ã –º–∞—Ç–∞–Ω–∞
    intr = "–í–≤–µ–¥–µ–Ω–∏–µ."
    lim = "–ü—Ä–µ–¥–µ–ª—ã –∏ –Ω–µ–ø—Ä-—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏."
    diff = "–î–∏—Ñ—Ñ-–∏–µ —Ñ—É–Ω–∫—Ü–∏–π."
    unc_int = "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª."
    cer_int = "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª."
    seq_ser = "–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ—Å–ª-—Ç–∏ –∏ —Ä—è–¥—ã."
    fourier_ser = "–†—è–¥—ã –§—É—Ä—å–µ."
    diff_few_var = "–î–∏—Ñ—Ñ —Ñ-–π –Ω–µ—Å–∫ –ø-—ã—Ö."
    doub_int = "–î–≤–æ–π–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã."
    trip_int = "–¢—Ä–æ–π–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã."
    mult_int = "–ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã."
    curv_int = "–ö—Ä–∏–≤–æ–ª–∏–Ω–µ–π–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã."
    surf_int = "–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã."
    field_th = "–≠–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–æ—Ä–∏–∏ –ø–æ–ª—è."
    math_theme_list = [intr, lim, diff, unc_int, cer_int, seq_ser, fourier_ser, diff_few_var,
                       doub_int, trip_int, mult_int, curv_int, surf_int, field_th]

    # —Ç–µ–º—ã –ª–∏–Ω–∞–ª–∞
    matrix = "–ú–∞—Ç—Ä–∏—Ü—ã."
    determinant = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å."
    slough = "–°–õ–ê–£."
    quad_form = "–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã."
    lin_space = "–õ–∏–Ω–µ–π–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞."
    eucl_space = "–ï–≤–∫–ª–∏–¥–æ–≤–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ."
    polynom = "–ú–Ω–æ–≥–æ—á–ª–µ–Ω—ã."
    field = "–ü–æ–ª—è."
    group = "–ì—Ä—É–ø–ø—ã."
    linal_theme_list = [matrix, determinant, slough, quad_form, lin_space,
                        eucl_space, polynom, field, group]

    # —Ç–µ–º—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    coord_plan = "–°-–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –ø–ª-—Ç–∏."
    line_equat = "–õ–∏–Ω–∏–∏ –∏ –∏—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏—è."
    line_plan = "–ü—Ä—è–º–∞—è –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏."
    seqt_th = "–¢–µ–æ—Ä–∏—è –∫–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Å–µ—á–µ–Ω–∏–π."
    coord_trans = "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."
    det_sec_thir = "–û–ø—Ä-–ª–∏ 2 –∏ 3 –ø–æ—Ä-–∫–∞."
    coord_spac = "–°-–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ø—Ä-–≤–µ."
    vect_alg = "–í–µ–∫—Ç–æ—Ä–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞."
    geom_equat = "–ì–µ–æ–º-–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä-–Ω–∏–π."
    line_spac = "–ü—Ä—è–º–∞—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ."
    plan_spac = "–ü–ª–æ—Å–∫–æ—Å—Ç—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ."
    surf_sec = "–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ 2-–≥–æ –ø–æ—Ä—è–¥–∫–∞."
    geom_theme_list = [coord_plan, line_equat, line_plan, seqt_th, coord_trans,
                       det_sec_thir, coord_spac, vect_alg, geom_equat, line_spac,
                       plan_spac, surf_sec]

    math_ans = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"

    @staticmethod
    def give_need_section(theme):
        if theme in Math.math_theme_list:
            return Math.matan
        elif theme in Math.linal_theme_list:
            return Math.linal
        elif theme in Math.geom_theme_list:
            return Math.geom

    @staticmethod
    def get_topic_size(topic):
        return Math.topic_sizes_dict[topic]
